{"version":3,"sources":["webpack:///./src/components/header/header-menu-item.js","webpack:///./src/components/header/header.js","webpack:///./src/components/footer.jsx","webpack:///./src/components/layout.js","webpack:///./src/templates/blog-post.js"],"names":["HeaderMenuItem","to","children","className","Header","siteTitle","target","useRef","useState","classNames","setClassNames","useEffect","io","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","current","disconnect","id","ref","defaultProps","Footer","Date","getFullYear","href","Layout","data","useStaticQuery","site","siteMetadata","title","BlogPost","post","markdownRemark","teg_test","frontmatter","tags","tag","date","dangerouslySetInnerHTML","__html","html","query"],"mappings":"0JAUeA,EANQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAGC,EAAN,EAAMA,SAAN,OACf,kBAAC,IAAD,CAAMC,UAAU,kBAAkBF,GAAIA,GAClC,8BAAQC,KCIdE,EAAS,SAAC,GAAkB,EAAhBC,UAAiB,IAC3BC,EAASC,iBAAO,MADU,EAEIC,mBAAS,eAAtCC,EAFyB,KAEbC,EAFa,KAyBhC,OAtBAC,qBAAU,WACR,IAYMC,EAAK,IAAIC,sBAZJ,SAACC,GACVA,EAAQC,SAAQ,SAACC,GACXA,EAAMC,eAERP,EAAc,eAGdA,EAAc,wBAOpB,OADAE,EAAGM,QAAQZ,EAAOa,SACX,WACLP,EAAGQ,iBAOL,oCACE,0BAAMC,GAAG,cAAcC,IAAKhB,IAC5B,4BAAQe,GAAG,gBAAgBlB,UAAWM,GACpC,yBAAKY,GAAG,yBACN,4BACE,kBAAC,IAAD,CAAMpB,GAAG,KAAT,aAGA,kBAAC,EAAD,CAAgBA,GAAG,YAAnB,WACA,kBAAC,EAAD,CAAgBA,GAAG,SAAnB,YAYZG,EAAOmB,aAAe,CACpBlB,UAAU,IAGGD,QCrCAoB,EAhBA,SAAC,GAAkB,EAAhBnB,UAChB,OACE,oCACE,4BAAQF,UAAU,iBAChB,yBAAKA,UAAU,eAAf,MACG,IAAIsB,MAAOC,cADd,mBAGA,uBAAGC,KAAK,4BAAR,c,oBC+BOC,IA5BA,SAAC,GAAkB,IAAD,EAAf1B,EAAe,EAAfA,SACV2B,EAAOC,YAAe,cAU5B,OACE,oCACE,kBAAC,EAAD,CAAQzB,WAAW,UAAAwB,EAAKE,KAAKC,oBAAV,eAAwBC,QAAxB,UACnB,8BACE,yBAAK9B,UAAU,aACZD,IAGL,kBAAC,EAAD,S,yDCrCN,0HAMe,SAASgC,EAAT,GAA6B,IAATL,EAAQ,EAARA,KAE3BM,EAAON,EAAKO,eAGdC,EAAW,GAQf,OAPIR,EAAKO,eAAeE,YAAYC,OAClCV,EAAKO,eAAeE,YAAYC,KAAKxB,SAAQ,SAAAyB,GAC3CH,EAAWA,EAAWG,EAAM,QAE9BH,EAAY,0BAAMlC,UAAU,qBAAqBkC,IAIjD,kBAAC,IAAD,KAEE,yBAAKlC,UAAU,aACb,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,sBACb0B,EAAKO,eAAeE,YAAYG,MAElCJ,EACD,4BAAKR,EAAKO,eAAeE,YAAYL,QAEvC,yBAAK9B,UAAU,gBAAgBuC,wBAAyB,CAAEC,OAAQR,EAAKS,UAMxE,IAAMC,EAAK","file":"component---src-templates-blog-post-js-c12bfa35e951e229f5c5.js","sourcesContent":["import { Link } from \"gatsby\"\r\n//import PropTypes from \"prop-types\"\r\nimport React from \"react\"\r\n\r\nconst HeaderMenuItem = ({ to,children }) => (\r\n        <Link className=\"menu-item-child\" to={to}>\r\n            <span >{children}</span>\r\n        </Link>\r\n)\r\n\r\nexport default HeaderMenuItem\r\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nimport HeaderMenuItem from \"./header-menu-item\"\n\nimport { useState, useEffect, useRef } from 'react';\nimport HeaderHamburgerfrom from \"./header-hamburger\"\n//import { withPrefix } from 'gatsby'\n\nconst Header = ({ siteTitle }) => {\n  const target = useRef(null);\n  const [classNames, setClassNames] = useState(\"isScrollTop\")\n  useEffect(() => {\n    const cb = (entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          //クラスの付け替え\n          setClassNames(\"isScrollTop\")\n        } else {\n          //クラスの付け替え\n          setClassNames(\"isNotScrollTop\")\n        }\n      })\n    };\n\n    const io = new IntersectionObserver(cb);\n    io.observe(target.current)\n    return () => {\n      io.disconnect()\n    }\n  })\n// <HeaderMenuItem to=\"/about\">about</HeaderMenuItem>\n\n//<HeaderHamburger/>\n  return (\n    <>\n      <span id=\"ifScrollTop\" ref={target} />\n      <header id=\"global_header\" className={classNames} >\n        <nav id=\"global_navigation_bar\">\n          <h1>\n            <Link to=\"/\">{/*siteTitle*/}Yamanoha</Link>\n          </h1>\n           \n            <HeaderMenuItem to=\"/prodact\">prodact</HeaderMenuItem>\n            <HeaderMenuItem to=\"/blog\">blog</HeaderMenuItem>\n        </nav>\n      </header>\n\n    </>\n  )\n}\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header","import { Link } from \"gatsby\"\r\nimport PropTypes from \"prop-types\"\r\nimport React from \"react\"\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\n//import { withPrefix } from 'gatsby'\r\n\r\nconst Footer = ({ siteTitle }) => {\r\n  return (\r\n    <>\r\n      <footer className=\"global_footer\">\r\n        <div className=\"footer-text\">\r\n        © {new Date().getFullYear()}, Built with\r\n          {` `}\r\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\r\n        </div>\r\n      </footer>\r\n    </>\r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default Footer","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header/header\"\nimport Footer from \"./footer\"\n//import \"./layout.css\"\n\nimport \"../style/global.scss\"\nimport \"../style/normalize.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <main >\n        <div className=\"container\">\n          {children}\n        </div>\n      </main>\n      <Footer></Footer>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\";\r\nimport Layout from \"../components/layout\";\r\n\r\nimport { graphql } from 'gatsby';\r\n\r\n\r\nexport default function BlogPost({ data }) {\r\n\r\n  const post = data.markdownRemark;\r\n\r\n  //タグ表示\r\n  let teg_test = \"\";\r\n  if (data.markdownRemark.frontmatter.tags) {\r\n    data.markdownRemark.frontmatter.tags.forEach(tag => {\r\n      teg_test = teg_test + tag + \", \";\r\n    });\r\n    teg_test = (<span className=\"blog-post-top-tag\">{teg_test}</span>)\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n\r\n      <div className=\"blog-post\">\r\n        <div className=\"blog-post-top\">\r\n          <span className=\"blog-post-top-date\">\r\n            {data.markdownRemark.frontmatter.date}\r\n          </span>\r\n          {teg_test}\r\n          <h1>{data.markdownRemark.frontmatter.title}</h1>\r\n        </div>\r\n        <div className=\"blog-contents\" dangerouslySetInnerHTML={{ __html: post.html }} />\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    markdownRemark( fields: { slug: { eq: $slug }}) {\r\n      html\r\n      frontmatter {\r\n        date(formatString: \"MMM D, YYYY\")\r\n        title\r\n        tags\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}